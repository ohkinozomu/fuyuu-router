apiVersion: v1
kind: ConfigMap
metadata:
  name: appserver-config
  namespace: fuyuu-router
data:
  server.go: |
    package main

    import (
      "io/ioutil"
      "net/http"
      "log"
    )

    func echoHandler(w http.ResponseWriter, r *http.Request) {
      body, err := ioutil.ReadAll(r.Body)
      if err != nil {
        http.Error(w, "Error reading body", http.StatusBadRequest)
        return
      }
      w.Write(body)
    }

    func main() {
      http.HandleFunc("/", echoHandler)
      if err := http.ListenAndServe(":8000", nil); err != nil {
        log.Fatal("ListenAndServe: ", err)
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fuyuu-router-agent
  namespace: fuyuu-router
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fuyuu-router-agent
  template:
    metadata:
      labels:
        app: fuyuu-router-agent
    spec:
      containers:
      - name: fuyuu-router-agent
        image: fuyuu-router:dev
        volumeMounts:
        - name: fuyuu-router-agent-config
          mountPath: /app/config
        command: ["/bin/sh", "-c"]
        args:
        - |
          /app/fuyuu-router agent -c /app/config/config.toml --id agent01 -b mqtt://mosquitto.mosquitto:1883 --proxy-host 127.0.0.1:8000 --loglevel debug
      - name: appserver
        image: golang:1.21.3
        volumeMounts:
        - name: config-volume
          mountPath: /app
        command: ["/bin/sh", "-c"]
        args:
        - |
          go run /app/server.go
        ports:
        - containerPort: 8000
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 5
      volumes:
      - name: config-volume
        configMap:
          name: appserver-config
      - name: fuyuu-router-agent-config
        configMap:
          name: fuyuu-router-agent-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fuyuu-router-agent-config
  namespace: fuyuu-router
data:
  config.toml: |
    [networking]
    format = "json"
    large_data_policy = "split"
    compress = "zstd"
    [split]
    chunk_bytes = 1
